<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Silenceneo&#39;s Blog</title>
  <subtitle>No pains, no gains.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://silenceneoxw.site/"/>
  <updated>2017-12-16T09:07:56.504Z</updated>
  <id>http://silenceneoxw.site/</id>
  
  <author>
    <name>Silenceneo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2017年下学期《C语言程序设计》课堂测验-1题解</title>
    <link href="http://silenceneoxw.site/2017/12/14/XTU%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AE%9E%E8%B7%B5/2017%E5%B9%B4%E4%B8%8B%E5%AD%A6%E6%9C%9F%E3%80%8AC%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E3%80%8B%E8%AF%BE%E5%A0%82%E6%B5%8B%E9%AA%8C-1%E9%A2%98%E8%A7%A3/"/>
    <id>http://silenceneoxw.site/2017/12/14/XTU程序设计实践/2017年下学期《C语言程序设计》课堂测验-1题解/</id>
    <published>2017-12-14T14:56:50.000Z</published>
    <updated>2017-12-16T09:07:56.504Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><h2 style="margin: 0;">前面的话</h2><br>本文使用的编辑器是 Sublime Text 3，Build 3143，编译器是 GCC 5.2.1。<br>文章为<a href="http://202.197.224.59/exam/index.php" target="_blank" rel="external">湘潭大学程序设计实践网站</a>一些考试编程题目的个人题解，不保证是最优解法，仅供参考学习。<br></blockquote>

<a id="more"></a>
<p>当时正闲得无聊，恰好又碰上了这个测验，索性就做了做，网址如下所示：<a href="http://202.197.224.59/exam/index.php/exam/problems/exam_id/226" target="_blank" rel="external">2017年下学期《C语言程序设计》课堂测验-1</a>。如果不能看到题目，可以直接搜索题号1276~1283。</p>
<h3 id="Problem-A"><a href="#Problem-A" class="headerlink" title="Problem A"></a>Problem A</h3><p>很简单的签到题，比较一下大小就可以了。代码如下所示：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">        <span class="keyword">int</span> ans = n-m;</div><div class="line">        <span class="keyword">if</span> (ans == <span class="number">0</span>)</div><div class="line">            <span class="built_in">puts</span>(<span class="string">"None"</span>);</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%s %d"</span>, ans&lt;<span class="number">0</span> ? <span class="string">"Alice"</span> : <span class="string">"Bob"</span>, <span class="built_in">abs</span>(ans)/<span class="number">2</span>);</div><div class="line">            <span class="keyword">if</span> (ans%<span class="number">2</span>)</div><div class="line">                <span class="built_in">printf</span>(<span class="string">".5"</span>);</div><div class="line">            <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Problem-B"><a href="#Problem-B" class="headerlink" title="Problem B"></a>Problem B</h3><p>这种找规律的图形题，比较烦，所以是最后做的。做法是，分为两部分输出，先输出上半部分，再输出下半部分。然后判断每行输出多少个空格以及几个字母就OK了，比较简单。代码如下所示：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">char</span> op[<span class="number">5</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> cnt=(x&lt;&lt;<span class="number">1</span>)<span class="number">-1</span>, t=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=x; i&gt;<span class="number">0</span>; --i) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;cnt; ++j)</div><div class="line">            <span class="built_in">putchar</span>(<span class="string">' '</span>);</div><div class="line">        --cnt;</div><div class="line">        <span class="keyword">char</span> ch = <span class="string">'A'</span><span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=t; ++j)</div><div class="line">            <span class="built_in">putchar</span>(++ch);</div><div class="line">        <span class="keyword">for</span> (; ch&gt;<span class="string">'A'</span>;)</div><div class="line">            <span class="built_in">putchar</span>(--ch);</div><div class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</div><div class="line">        ++t;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> ct = (x&lt;&lt;<span class="number">1</span>)<span class="number">-1</span>;</div><div class="line">    t = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=x; i&gt;<span class="number">0</span>; --i) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;cnt; ++j)</div><div class="line">            <span class="built_in">putchar</span>(<span class="string">' '</span>);</div><div class="line">        <span class="keyword">char</span> ch = <span class="string">'A'</span><span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=t; ++j)</div><div class="line">            <span class="built_in">putchar</span>(++ch);</div><div class="line">        <span class="keyword">for</span> (; ch&gt;<span class="string">'A'</span>;)</div><div class="line">            <span class="built_in">putchar</span>(--ch);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;ct; ++j)</div><div class="line">            <span class="built_in">putchar</span>(<span class="string">' '</span>);</div><div class="line">        ch = <span class="string">'A'</span><span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=t; ++j)</div><div class="line">            <span class="built_in">putchar</span>(++ch);</div><div class="line">        <span class="keyword">for</span> (; ch&gt;<span class="string">'A'</span>;)</div><div class="line">            <span class="built_in">putchar</span>(--ch);</div><div class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</div><div class="line">        ct -= <span class="number">2</span>;</div><div class="line">        --cnt;</div><div class="line">        ++t;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%s"</span>, op))</div><div class="line">        solve(op[<span class="number">0</span>]-<span class="string">'A'</span>+<span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Problem-C"><a href="#Problem-C" class="headerlink" title="Problem C"></a>Problem C</h3><p>找一个相邻差，然后再将它与所有相邻差比较，有一个不相等就说明不是等差数列。代码如下所示：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10005</span>;</div><div class="line"><span class="keyword">int</span> num[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, num+i);</div><div class="line">        <span class="keyword">int</span> ans = num[<span class="number">1</span>]-num[<span class="number">0</span>];</div><div class="line">        <span class="keyword">bool</span> ok = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;n&amp;&amp;ok; ++i)</div><div class="line">            <span class="keyword">if</span> (ans != num[i]-num[i<span class="number">-1</span>])</div><div class="line">                ok = <span class="literal">false</span>;</div><div class="line">        <span class="built_in">puts</span>(ok ? <span class="string">"Yes"</span> : <span class="string">"No"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Problem-D"><a href="#Problem-D" class="headerlink" title="Problem D"></a>Problem D</h3><p>先将所有范围内的素数筛出来，然后利用这些素数判断一个数是不是双素数，接着利用这个判断预处理前缀和，最终对于每次访问可直接得到答案。代码如下所示：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000005</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1005</span>;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> prime[maxn];</div><div class="line"><span class="keyword">int</span> ans[maxn];</div><div class="line"><span class="keyword">int</span> a, b, cnt;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">filter</span><span class="params">()</span> </span>&#123;</div><div class="line">    vis[<span class="number">0</span>] = vis[<span class="number">1</span>] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;maxm; ++i)</div><div class="line">        <span class="keyword">if</span> (!vis[i])</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=i*i; j&lt;maxn; j+=i)</div><div class="line">                vis[j] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;maxn; ++i)</div><div class="line">        <span class="keyword">if</span> (!vis[i])</div><div class="line">            prime[cnt++] = i;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_double_prime</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;cnt&amp;&amp;prime[i]*prime[i]&lt;=x; ++i)</div><div class="line">        <span class="keyword">if</span> (x%prime[i]==<span class="number">0</span> &amp;&amp; prime[i]*prime[i]!=x &amp;&amp; !vis[x/prime[i]])</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">    filter();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">6</span>; i&lt;maxn; ++i)</div><div class="line">        ans[i] = ans[i<span class="number">-1</span>]+is_double_prime(i);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[b]-ans[a<span class="number">-1</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Problem-E"><a href="#Problem-E" class="headerlink" title="Problem E"></a>Problem E</h3><p>类似于将26进制数转换为10进制数，只不过最高位永远为1，边转换边模，防止溢出。为什么可以这么转换呢？有点类似于秦九韶算法，最先出现的数位权越大，经过后面的迭代，最先出现的权就是最大的。代码如下所示：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1005</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> p = <span class="number">1000000007</span>;</div><div class="line"><span class="keyword">char</span> str[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%s"</span>, str)) &#123;</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; str[i]; ++i)</div><div class="line">            ans = ((<span class="keyword">long</span> <span class="keyword">long</span>)ans*<span class="number">26</span>+str[i]-<span class="string">'a'</span>)%p;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Problem-F"><a href="#Problem-F" class="headerlink" title="Problem F"></a>Problem F</h3><p>记录字母种类可以用一个数的二进制位来标记，某一位为1就表示该字母出现过，最后数这个数二进制位为1的有几位就行了；那单词个数如何记录呢？其实也很简单，只要在某一个不是字母的字符前面出现字母，那么必是一个单词，当然，这个只能用一次，记得清除标记。代码如下所示：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">205</span>;</div><div class="line"><span class="keyword">char</span> str[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">one</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (x) &#123;</div><div class="line">        <span class="keyword">if</span> (x &amp; <span class="number">1</span>)</div><div class="line">            ++ans;</div><div class="line">        x &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span> (fgets(str, maxn, <span class="built_in">stdin</span>)) &#123;</div><div class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>, cnt=<span class="number">0</span>;</div><div class="line">        <span class="keyword">bool</span> ok = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; str[i]; ++i) &#123;</div><div class="line">            <span class="keyword">if</span> ((str[i]&gt;=<span class="string">'A'</span>&amp;&amp;str[i]&lt;=<span class="string">'Z'</span>)</div><div class="line">                || (str[i]&gt;=<span class="string">'a'</span>&amp;&amp;str[i]&lt;=<span class="string">'z'</span>)) &#123;</div><div class="line">                ans |= (<span class="number">1</span>&lt;&lt;((str[i]&gt;=<span class="string">'A'</span>&amp;&amp;str[i]&lt;=<span class="string">'Z'</span> ? str[i]-<span class="string">'A'</span> : str[i]-<span class="string">'a'</span>)));</div><div class="line">                ok = <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span> (ok)</div><div class="line">                    ++cnt;</div><div class="line">                ok = <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">puts</span>(one(ans)&gt;<span class="number">10</span>||cnt&gt;<span class="number">10</span> ? <span class="string">"No"</span> : <span class="string">"Yes"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Problem-G"><a href="#Problem-G" class="headerlink" title="Problem G"></a>Problem G</h3><p>一开始，看到a与b只相差10，果断直接通分，用64位整数存储，最后化简，然后就WA了。最后看到了b最大有100，所以超过了范围。然后灵机一动，一次不行，那就两次吧，哈哈，AC了。代码如下所示：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">int</span> a, b;</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a, ll b)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> b ? gcd(b, a%b) : a;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</div><div class="line">        ll s1=<span class="number">1</span>, t1=<span class="number">0</span>, t=(a+b)&gt;&gt;<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=a; i&lt;t; ++i)</div><div class="line">            s1 *= i;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=a; i&lt;t; ++i)</div><div class="line">            t1 += s1/i;</div><div class="line">        ll d = gcd(s1, t1);</div><div class="line">        s1 /= d;</div><div class="line">        t1 /= d;</div><div class="line">        ll s2=<span class="number">1</span>, t2=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=t; i&lt;=b; ++i)</div><div class="line">            s2 *= i;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=t; i&lt;=b; ++i)</div><div class="line">            t2 += s2/i;</div><div class="line">        d = gcd(s2, t2);</div><div class="line">        s2 /= d;</div><div class="line">        t2 /= d;</div><div class="line">        d = s1/gcd(s1, s2)*s2;</div><div class="line">        t = d/s1*t1+d/s2*t2;</div><div class="line">        ll s = gcd(d, t);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d/%I64d\n"</span>, t/s, d/s);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Problem-H"><a href="#Problem-H" class="headerlink" title="Problem H"></a>Problem H</h3><p>这题也比较容易想到，显然最高位为1，那么低位的1的个数显然不能低于位数的一半，这就将问题转换为在低位中选择特定个数1的位置的种类有多少种，显然需要用到杨辉三角，于是预处理杨辉三角。对于位数n，就有在n-1位中，选择一半以上1的种类的个数。（PS：一开始，以为是要求1-n的所有，所以WA了一发）代码如下所示：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">65</span>;</div><div class="line">ll tri[maxn][maxn];</div><div class="line">ll ans[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; ++i) &#123;</div><div class="line">        tri[i][<span class="number">0</span>] = tri[i][i] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;i; ++j)</div><div class="line">            tri[i][j] = tri[i<span class="number">-1</span>][j<span class="number">-1</span>]+tri[i<span class="number">-1</span>][j];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;maxn; ++i) &#123;</div><div class="line">        <span class="keyword">int</span> t = i<span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=t/<span class="number">2</span>+t%<span class="number">2</span>; j&lt;i; ++j)</div><div class="line">            ans[i] += tri[t][j];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans[n]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>总结：总体来说，题目还是比较简单的，但是还是要花一点时间来思考。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;h2 style=&quot;margin: 0;&quot;&gt;前面的话&lt;/h2&gt;&lt;br&gt;本文使用的编辑器是 Sublime Text 3，Build 3143，编译器是 GCC 5.2.1。&lt;br&gt;文章为&lt;a href=&quot;http://202.197.224.59/exam/index.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;湘潭大学程序设计实践网站&lt;/a&gt;一些考试编程题目的个人题解，不保证是最优解法，仅供参考学习。&lt;br&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="XTU程序设计实践" scheme="http://silenceneoxw.site/categories/XTU%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AE%9E%E8%B7%B5/"/>
    
    
      <category term="XTU" scheme="http://silenceneoxw.site/tags/XTU/"/>
    
      <category term="C语言程序设计" scheme="http://silenceneoxw.site/tags/C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="题解" scheme="http://silenceneoxw.site/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>抽象工厂模式</title>
    <link href="http://silenceneoxw.site/2017/10/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://silenceneoxw.site/2017/10/07/设计模式学习记录/抽象工厂模式/</id>
    <published>2017-10-07T14:09:15.000Z</published>
    <updated>2017-10-07T15:07:40.711Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><h2 style="margin: 0;">前面的话</h2><br>本文使用的 IDE 是 Eclipse Mars.2 Release (4.5.2)。<br>文章为学习设计模式（来源：<a href="http://www.runoob.com" target="_blank" rel="external">菜鸟教程</a>）时所记录的内容，可能包含遇到的问题，仅供学习交流。<br></blockquote>

<a id="more"></a>
<p>抽象工厂模式（<code>Abstract Factory Pattern</code>）是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>
<p>在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显式指定它们的类。每个生成的工厂都能按照工厂模式提供对象。</p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图</strong>：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p>
<p><strong>主要解决</strong>：主要解决接口选择的问题。</p>
<p><strong>何时使用</strong>：系统的产品有多于一个的产品族，而系统只消费其中某一族的产品。</p>
<p><strong>如何解决</strong>：在一个产品族里面，定义多个产品。</p>
<p><strong>关键代码</strong>：在一个工厂里聚合多个同类产品。</p>
<p><strong>应用实例</strong>：工作了，为了参加一些聚会，肯定有两套或多套衣服吧，比如说有商务装（成套，一系列具体产品）、时尚装（成套，一系列具体产品），甚至对于一个家庭来说，可能有商务女装、商务男装、时尚女装、时尚男装，这些也都是成套的，即一系列具体产品。假设一种情况（现实中是不存在的，要不然，没法进入共产主义了，但有利于说明抽象工厂模式），在您的家中，某一个衣柜（具体工厂）只能存放某一种这样的衣服（成套，一系列具体产品），每次拿这种成套的衣服时也自然要从这个衣柜中取出了。用 <code>OO</code> 的思想去理解，所有的衣柜（具体工厂）都是衣柜类的（抽象工厂）某一个，而每一件成套的衣服又包括具体的上衣（某一具体产品），裤子（某一具体产品），这些具体的上衣其实也都是上衣（抽象产品），具体的裤子也都是裤子（另一个抽象产品）。</p>
<p><strong>优点</strong>：当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。</p>
<p><strong>缺点</strong>：产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象的 <code>Creator</code> 里加代码，又要在具体的里面加代码。</p>
<p><strong>注意事项</strong>：产品族难扩展，产品等级易扩展。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>演示实例的关系图如下所示：<br><img src="http://ovamygxnt.bkt.clouddn.com/images/抽象工厂模式.jpg"></p>
<h3 id="步骤1"><a href="#步骤1" class="headerlink" title="步骤1"></a>步骤1</h3><p>为形状创建一个接口。代码如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="步骤2"><a href="#步骤2" class="headerlink" title="步骤2"></a>步骤2</h3><p>创建实现接口的实体类。代码如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"Inside Rectangle::draw() method."</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"Inside Circle::draw() method."</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"Inside Square::draw() method."</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="步骤3"><a href="#步骤3" class="headerlink" title="步骤3"></a>步骤3</h3><p>为颜色创建一个接口。代码如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Color</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">fill</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="步骤4"><a href="#步骤4" class="headerlink" title="步骤4"></a>步骤4</h3><p>创建实现接口的实体类。代码如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Red</span> <span class="keyword">implements</span> <span class="title">Color</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"Inside Red::fill() method."</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Green</span> <span class="keyword">implements</span> <span class="title">Color</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"Inside Green::fill() method."</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blue</span> <span class="keyword">implements</span> <span class="title">Color</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"Inside Blue::fill() method."</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="步骤5"><a href="#步骤5" class="headerlink" title="步骤5"></a>步骤5</h3><p>为 <code>Color</code> 和 <code>Shape</code> 对象创建抽象类来获取工厂。代码如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">abstract</span> Color <span class="title">getColor</span><span class="params">(String color)</span></span>;</div><div class="line">	<span class="function"><span class="keyword">abstract</span> Shape <span class="title">getShape</span><span class="params">(String shape)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="步骤6"><a href="#步骤6" class="headerlink" title="步骤6"></a>步骤6</h3><p>创建扩展了 <code>AbstractFactory</code> 的工厂类，基于给定的信息生成实体类的对象。代码如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function">Color <span class="title">getColor</span><span class="params">(String color)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">(String shapeType)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (shapeType == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (shapeType.equalsIgnoreCase(<span class="string">"CIRCLE"</span>)) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Circle();</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (shapeType.equalsIgnoreCase(<span class="string">"RECTANGLE"</span>)) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Rectangle();</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (shapeType.equalsIgnoreCase(<span class="string">"SQUARE"</span>)) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Square();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColorFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Color <span class="title">getColor</span><span class="params">(String colorType)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (colorType == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (colorType.equalsIgnoreCase(<span class="string">"RED"</span>)) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Red();</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (colorType.equalsIgnoreCase(<span class="string">"GREEN"</span>)) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Green();</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (colorType.equalsIgnoreCase(<span class="string">"BLUE"</span>)) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Blue();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function">Shape <span class="title">getShape</span><span class="params">(String shape)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="步骤7"><a href="#步骤7" class="headerlink" title="步骤7"></a>步骤7</h3><p>创建一个工厂创造器/生成器类，通过传递形状或颜色信息来获取工厂。代码如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryProducer</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AbstractFactory <span class="title">getFactory</span><span class="params">(String choice)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (choice.equalsIgnoreCase(<span class="string">"SHAPE"</span>)) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> ShapeFactory();</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (choice.equalsIgnoreCase(<span class="string">"COLOR"</span>)) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> ColorFactory();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="步骤8"><a href="#步骤8" class="headerlink" title="步骤8"></a>步骤8</h3><p>使用 <code>FactoryProducer</code> 来获取 <code>AbstractFactory</code>，通过传递类型信息来获取实体类的对象。代码如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactoryPatternDemo</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// 获取形状工厂</span></div><div class="line">		AbstractFactory shapeFactory = FactoryProducer.getFactory(<span class="string">"SHAPE"</span>);</div><div class="line"></div><div class="line">		<span class="comment">// 获取形状为 Circle 的对象</span></div><div class="line">		Shape shape1 = shapeFactory.getShape(<span class="string">"CIRCLE"</span>);</div><div class="line"></div><div class="line">		<span class="comment">// 调用 Circle 的 draw 方法</span></div><div class="line">		shape1.draw();</div><div class="line"></div><div class="line">		<span class="comment">// 获取形状为 Rectangle 的对象</span></div><div class="line">		Shape shape2 = shapeFactory.getShape(<span class="string">"RECTANGLE"</span>);</div><div class="line"></div><div class="line">		<span class="comment">// 调用 Rectangle 的 draw 方法</span></div><div class="line">		shape2.draw();</div><div class="line"></div><div class="line">		<span class="comment">// 获取形状为 Square 的对象</span></div><div class="line">		Shape shape3 = shapeFactory.getShape(<span class="string">"SQUARE"</span>);</div><div class="line"></div><div class="line">		<span class="comment">// 调用 Square 的 draw 方法</span></div><div class="line">		shape3.draw();</div><div class="line"></div><div class="line">		<span class="comment">// 获取颜色工厂</span></div><div class="line">		AbstractFactory colorFactory = FactoryProducer.getFactory(<span class="string">"COLOR"</span>);</div><div class="line"></div><div class="line">		<span class="comment">// 获取颜色为 Red 的对象</span></div><div class="line">		Color color1 = colorFactory.getColor(<span class="string">"RED"</span>);</div><div class="line"></div><div class="line">		<span class="comment">// 调用 Red 的 fill 方法</span></div><div class="line">		color1.fill();</div><div class="line"></div><div class="line">		<span class="comment">// 获取颜色为 Green 的对象</span></div><div class="line">		Color color2 = colorFactory.getColor(<span class="string">"Green"</span>);</div><div class="line"></div><div class="line">		<span class="comment">// 调用 Green 的 fill 方法</span></div><div class="line">		color2.fill();</div><div class="line"></div><div class="line">		<span class="comment">// 获取颜色为 Blue 的对象</span></div><div class="line">		Color color3 = colorFactory.getColor(<span class="string">"BLUE"</span>);</div><div class="line"></div><div class="line">		<span class="comment">// 调用 Blue 的 fill 方法</span></div><div class="line">		color3.fill();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="步骤9"><a href="#步骤9" class="headerlink" title="步骤9"></a>步骤9</h3><p>验证输出。如下所示：</p>
<blockquote>
<p>Inside Circle::draw() method.<br>Inside Rectangle::draw() method.<br>Inside Square::draw() method.<br>Inside Red::fill() method.<br>Inside Green::fill() method.<br>Inside Blue::fill() method.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;h2 style=&quot;margin: 0;&quot;&gt;前面的话&lt;/h2&gt;&lt;br&gt;本文使用的 IDE 是 Eclipse Mars.2 Release (4.5.2)。&lt;br&gt;文章为学习设计模式（来源：&lt;a href=&quot;http://www.runoob.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;菜鸟教程&lt;/a&gt;）时所记录的内容，可能包含遇到的问题，仅供学习交流。&lt;br&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="设计模式学习记录" scheme="http://silenceneoxw.site/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="Java" scheme="http://silenceneoxw.site/tags/Java/"/>
    
      <category term="设计模式" scheme="http://silenceneoxw.site/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="抽象工厂模式" scheme="http://silenceneoxw.site/tags/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>工厂模式</title>
    <link href="http://silenceneoxw.site/2017/10/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://silenceneoxw.site/2017/10/04/设计模式学习记录/工厂模式/</id>
    <published>2017-10-04T14:49:40.000Z</published>
    <updated>2017-10-04T15:39:16.212Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><h2 style="margin: 0;">前面的话</h2><br>本文使用的 IDE 是 Eclipse Mars.2 Release (4.5.2)。<br>文章为学习设计模式（来源：<a href="http://www.runoob.com" target="_blank" rel="external">菜鸟教程</a>）时所记录的内容，可能包含遇到的问题，仅供学习交流。<br></blockquote>

<a id="more"></a>
<p>工厂模式（<code>Factory Pattern</code>）是 <code>Java</code> 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>
<p>在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图</strong>：定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。</p>
<p><strong>主要解决</strong>：主要解决接口选择的问题。</p>
<p><strong>何时使用</strong>：我们明确地计划不同条件下创建不同实例时。</p>
<p><strong>如何解决</strong>：让其子类实现工厂接口，返回的也是一个抽象的产品。</p>
<p><strong>关键代码</strong>：创建过程在其子类执行。</p>
<p><strong>应用实例</strong>：1、您需要一辆汽车，可以直接从工厂里面提货，而不用去管这辆汽车是怎么做出来的，以及这个汽车里面的具体实现。 2、<code>Hibernate</code> 换数据库只需换方言和驱动就可以。</p>
<p><strong>优点</strong>：1、一个调用者想创建一个对象，只要知道其名称就可以了。 2、扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。 3、屏蔽产品的具体实现，调用者只关心产品的接口。</p>
<p><strong>缺点</strong>：每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。</p>
<p><strong>注意事项</strong>：作为一种创建类模式，在任何需要生成复杂对象的地方，都可以使用工厂方法模式。有一点需要注意的地方就是复杂对象适合使用工厂模式，而简单对象，特别是只需要通过 new 就可以完成创建的对象，无需使用工厂模式。如果使用工厂模式，就需要引入一个工厂类，会增加系统的复杂度。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>演示实例的关系图如下所示：<br><img src="http://ovamygxnt.bkt.clouddn.com/images/工厂模式.jpg"></p>
<h3 id="步骤1"><a href="#步骤1" class="headerlink" title="步骤1"></a>步骤1</h3><p>创建一个接口。代码如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="步骤2"><a href="#步骤2" class="headerlink" title="步骤2"></a>步骤2</h3><p>创建实现接口的实体类。代码如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"Inside Rectangle::draw() method."</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"Inside Circle::draw() method."</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"Inside Square::draw() method."</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="步骤3"><a href="#步骤3" class="headerlink" title="步骤3"></a>步骤3</h3><p>创建一个工厂，生成基于给定信息的实体类的对象。代码如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeFactory</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 获取形状类型的对象</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> shapeType</span></div><div class="line"><span class="comment">	 * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">(String shapeType)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (shapeType == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (shapeType.equalsIgnoreCase(<span class="string">"CIRCLE"</span>)) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Circle();</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (shapeType.equalsIgnoreCase(<span class="string">"RECTANGLE"</span>)) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Rectangle();</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (shapeType.equalsIgnoreCase(<span class="string">"SQUARE"</span>)) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Square();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="步骤4"><a href="#步骤4" class="headerlink" title="步骤4"></a>步骤4</h3><p>使用该工厂，通过传递类型信息来获取实体类的对象。代码如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryPatternDemo</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		ShapeFactory shapeFactory = <span class="keyword">new</span> ShapeFactory();</div><div class="line"></div><div class="line">		<span class="comment">// 获取 Circle 的对象，并调用它的 draw 方法</span></div><div class="line">		Shape shape1 = shapeFactory.getShape(<span class="string">"CIRCLE"</span>);</div><div class="line"></div><div class="line">		<span class="comment">// 调用 Circle 的 draw 方法</span></div><div class="line">		shape1.draw();</div><div class="line"></div><div class="line">		<span class="comment">// 获取 Rectangle 的对象，并调用它的 draw 方法</span></div><div class="line">		Shape shape2 = shapeFactory.getShape(<span class="string">"RECTANGLE"</span>);</div><div class="line"></div><div class="line">		<span class="comment">// 调用 Rectangle 的 draw 方法</span></div><div class="line">		shape2.draw();</div><div class="line"></div><div class="line">		<span class="comment">// 获取 Square 的对象，并调用它的 draw 方法</span></div><div class="line">		Shape shape3 = shapeFactory.getShape(<span class="string">"SQUARE"</span>);</div><div class="line"></div><div class="line">		<span class="comment">// 调用 Square 的 draw 方法</span></div><div class="line">		shape3.draw();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="步骤5"><a href="#步骤5" class="headerlink" title="步骤5"></a>步骤5</h3><p>验证输出。如下所示：</p>
<blockquote>
<p>Inside Circle::draw() method.<br>Inside Rectangle::draw() method.<br>Inside Square::draw() method.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;h2 style=&quot;margin: 0;&quot;&gt;前面的话&lt;/h2&gt;&lt;br&gt;本文使用的 IDE 是 Eclipse Mars.2 Release (4.5.2)。&lt;br&gt;文章为学习设计模式（来源：&lt;a href=&quot;http://www.runoob.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;菜鸟教程&lt;/a&gt;）时所记录的内容，可能包含遇到的问题，仅供学习交流。&lt;br&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="设计模式学习记录" scheme="http://silenceneoxw.site/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="Java" scheme="http://silenceneoxw.site/tags/Java/"/>
    
      <category term="设计模式" scheme="http://silenceneoxw.site/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="工厂模式" scheme="http://silenceneoxw.site/tags/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式简介</title>
    <link href="http://silenceneoxw.site/2017/10/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AE%80%E4%BB%8B/"/>
    <id>http://silenceneoxw.site/2017/10/04/设计模式学习记录/设计模式简介/</id>
    <published>2017-10-04T13:31:50.000Z</published>
    <updated>2017-10-04T14:46:45.496Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><h2 style="margin: 0;">前面的话</h2><br>本文使用的 IDE 是 Eclipse Mars.2 Release (4.5.2)。<br>文章为学习设计模式（来源：<a href="http://www.runoob.com" target="_blank" rel="external">菜鸟教程</a>）时所记录的内容，可能包含遇到的问题，仅供学习交流。<br></blockquote>

<a id="more"></a>
<h2 id="设计模式简介"><a href="#设计模式简介" class="headerlink" title="设计模式简介"></a>设计模式简介</h2><p>设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p>
<p>设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是<code>为了重用代码、让代码更容易被他人理解、保证代码可靠性</code>。</p>
<p>设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理地运用设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是设计模式能被广泛应用的原因。</p>
<h2 id="设计模式的类型"><a href="#设计模式的类型" class="headerlink" title="设计模式的类型"></a>设计模式的类型</h2><p>根据设计模式的参考书 <code>Design Patterns - Elements of Reusable Object-Oriented Software</code>（中文译名：<code>设计模式 - 可复用的面向对象软件元素</code>） 中所提到的，总共有 <code>23</code> 种设计模式。这些模式可以分为三大类：</p>
<blockquote>
<p><code>创建型模式</code>（<code>Creational Patterns</code>）<br><code>结构型模式</code>（<code>Structural Patterns</code>）<br><code>行为型模式</code>（<code>Behavioral Patterns</code>）</p>
</blockquote>
<p>当然，还会讨论另一类设计模式： <code>J2EE</code> 设计模式。</p>
<h3 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h3><p>这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</p>
<p>其中有5种，包括：</p>
<blockquote>
<p><code>工厂模式</code>（<code>Factory Pattern</code>）<br><code>抽象工厂模式</code>（<code>Abstract Factory Pattern</code>）<br><code>单例模式</code>（<code>Singleton Pattern</code>）<br><code>建造者模式</code>（<code>Builder Pattern</code>）<br><code>原型模式</code>（<code>Prototype Pattern</code>）</p>
</blockquote>
<h3 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h3><p>这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</p>
<p>其中有8种，包括：</p>
<blockquote>
<p><code>适配器模式</code>（<code>Adapter Pattern</code>）<br><code>桥接模式</code>（<code>Bridge Pattern</code>）<br><code>过滤器模式</code>（<code>Filter Criteria Pattern</code>）<br><code>组合模式</code>（<code>Composite Pattern</code>）<br><code>装饰器模式</code>（<code>Decorator Pattern</code>）<br><code>外观模式</code>（<code>Facade Pattern</code>）<br><code>享元模式</code>（<code>Flyweight Pattern</code>）<br><code>代理模式</code>（<code>Proxy Pattern</code>）</p>
</blockquote>
<h3 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h3><p>这些设计模式特别关注对象之间的通信。</p>
<p>其中有12种，包括：</p>
<blockquote>
<p><code>责任链模式</code>（<code>Chain of Responsibility Pattern</code>）<br><code>命令模式</code>（<code>Command Pattern</code>）<br><code>解释器模式</code>（<code>Interpreter Pattern</code>）<br><code>迭代器模式</code>（<code>Iterator Pattern</code>）<br><code>中介者模式</code>（<code>Mediator Pattern</code>）<br><code>备忘录模式</code>（<code>Memento Pattern</code>）<br><code>观察者模式</code>（<code>Observer Pattern</code>）<br><code>状态模式</code>（<code>State Pattern</code>）<br><code>空对象模式</code>（<code>Null Object Pattern</code>）<br><code>策略模式</code>（<code>Strategy Pattern</code>）<br><code>模板模式</code>（<code>Template Pattern</code>）<br><code>访问者模式</code>（<code>Visitor Pattern</code>）</p>
</blockquote>
<h3 id="J2EE-模式"><a href="#J2EE-模式" class="headerlink" title="J2EE 模式"></a>J2EE 模式</h3><p>这些设计模式特别关注表示层。这些模式是由 <code>Sun Java Center</code> 鉴定的。</p>
<p>其中有8种，包括：</p>
<blockquote>
<p><code>MVC 模式</code>（<code>MVC Pattern</code>）<br><code>业务代表模式</code>（<code>Business Delegate Pattern</code>）<br><code>组合实体模式</code>（<code>Composite Entity Pattern</code>）<br><code>数据访问对象模式</code>（<code>Data Access Object Pattern</code>）<br><code>前端控制器模式</code>（<code>Front Controller Pattern</code>）<br><code>拦截过滤器模式</code>（<code>Intercepting Filter Pattern</code>）<br><code>服务定位器模式</code>（<code>Service Locator Pattern</code>）<br><code>传输对象模式</code>（<code>Transfer Object Pattern</code>）</p>
</blockquote>
<p>下面用一个图片来整体描述一下设计模式之间的关系：<br><img src="http://ovamygxnt.bkt.clouddn.com/images/设计模式之间的关系.jpg"></p>
<h2 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h2><h3 id="1、开闭原则（Open-Close-Principle）"><a href="#1、开闭原则（Open-Close-Principle）" class="headerlink" title="1、开闭原则（Open Close Principle）"></a>1、开闭原则（Open Close Principle）</h3><p>开闭原则的意思是：<strong>对扩展开放，对修改关闭</strong>。简而言之，就是实现热插拔，提高扩展性。</p>
<h3 id="2、里氏代换原则（Liskov-Substitution-Principle）"><a href="#2、里氏代换原则（Liskov-Substitution-Principle）" class="headerlink" title="2、里氏代换原则（Liskov Substitution Principle）"></a>2、里氏代换原则（Liskov Substitution Principle）</h3><p>里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。里氏代换原则是对开闭原则的补充。简而言之，就是实现抽象的规范，实现子父类互相替换。</p>
<h3 id="3、依赖倒转原则（Dependence-Inversion-Principle）"><a href="#3、依赖倒转原则（Dependence-Inversion-Principle）" class="headerlink" title="3、依赖倒转原则（Dependence Inversion Principle）"></a>3、依赖倒转原则（Dependence Inversion Principle）</h3><p>这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。简而言之，就是针对接口编程，实现开闭原则的基础。</p>
<h3 id="4、接口隔离原则（Interface-Segregation-Principle）"><a href="#4、接口隔离原则（Interface-Segregation-Principle）" class="headerlink" title="4、接口隔离原则（Interface Segregation Principle）"></a>4、接口隔离原则（Interface Segregation Principle）</h3><p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。简而言之，就是降低耦合度，接口单独设计，互相隔离。</p>
<h3 id="5、迪米特法则，又称最少知道原则（Demeter-Principle）"><a href="#5、迪米特法则，又称最少知道原则（Demeter-Principle）" class="headerlink" title="5、迪米特法则，又称最少知道原则（Demeter Principle）"></a>5、迪米特法则，又称最少知道原则（Demeter Principle）</h3><p>最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。简而言之，就是功能模块尽量独立。</p>
<h3 id="6、合成复用原则（Composite-Reuse-Principle）"><a href="#6、合成复用原则（Composite-Reuse-Principle）" class="headerlink" title="6、合成复用原则（Composite Reuse Principle）"></a>6、合成复用原则（Composite Reuse Principle）</h3><p>合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。简而言之，就是尽量使用聚合、组合，而不是继承。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;h2 style=&quot;margin: 0;&quot;&gt;前面的话&lt;/h2&gt;&lt;br&gt;本文使用的 IDE 是 Eclipse Mars.2 Release (4.5.2)。&lt;br&gt;文章为学习设计模式（来源：&lt;a href=&quot;http://www.runoob.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;菜鸟教程&lt;/a&gt;）时所记录的内容，可能包含遇到的问题，仅供学习交流。&lt;br&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="设计模式学习记录" scheme="http://silenceneoxw.site/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="Java" scheme="http://silenceneoxw.site/tags/Java/"/>
    
      <category term="设计模式" scheme="http://silenceneoxw.site/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>RecyclerView的简单用法</title>
    <link href="http://silenceneoxw.site/2017/08/23/Android%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/RecyclerView%E7%9A%84%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95/"/>
    <id>http://silenceneoxw.site/2017/08/23/Android学习记录/RecyclerView的简单用法/</id>
    <published>2017-08-23T14:08:15.000Z</published>
    <updated>2017-08-27T13:40:54.211Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><h2 style="margin: 0;">前面的话</h2><br>本文使用的 IDE 是 Android Studio 2.3.1 ，模拟器是夜神模拟器 5.0.0.0 。<br>文章为学习《第一行代码——Android》（第二版）时所记录的内容，可能包含遇到的问题，仅供学习交流。<br></blockquote><br><a id="more"></a></p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先，在<code>Android Studio</code>上新建一个项目，项目名叫<code>RecyclerViewTest</code>，并让<code>Android Studio</code>自动帮我们创建好活动。</p>
<h2 id="RecyclerView的基本用法"><a href="#RecyclerView的基本用法" class="headerlink" title="RecyclerView的基本用法"></a>RecyclerView的基本用法</h2><h3 id="添加依赖库"><a href="#添加依赖库" class="headerlink" title="添加依赖库"></a>添加依赖库</h3><p><code>RecyclerView</code>属于新增的控件，所以首先需要在项目的<code>build.gradle</code>中添加相应的依赖库。打开<code>app/build.gradle</code>文件，在<code>dependencies</code>闭包中添加如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;])</div><div class="line">    androidTestCompile(&apos;com.android.support.test.espresso:espresso-core:2.2.2&apos;, &#123;</div><div class="line">        exclude group: &apos;com.android.support&apos;, module: &apos;support-annotations&apos;</div><div class="line">    &#125;)</div><div class="line">    compile &apos;com.android.support:appcompat-v7:25.3.1&apos;</div><div class="line">    compile &apos;com.android.support:recyclerview-v7:25.3.1&apos;</div><div class="line">    compile &apos;com.android.support.constraint:constraint-layout:1.0.2&apos;</div><div class="line">    testCompile &apos;junit:junit:4.12&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>添加的代码如下（后面的数字与上面的一项相同即可）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile &apos;com.android.support:recyclerview-v7:25.3.1&apos;</div></pre></td></tr></table></figure></p>
<p>添加完成之后，记得要点击一下右上角的<code>Sync Now</code>来进行同步。</p>
<h3 id="修改布局和活动文件"><a href="#修改布局和活动文件" class="headerlink" title="修改布局和活动文件"></a>修改布局和活动文件</h3><p>修改<code>activity_main.xml</code>中的代码，如下所示：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/recycler_view"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span><span class="tag">&lt;/<span class="name">android.support.v7.widget.RecyclerView</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>需要注意的是，由于<code>RecyclerView</code>并不是内置在系统<code>SDK</code>当中的，所以需要把完整的包路径写出来。<br>因为我们想要使用<code>RecyclerView</code>来实现和上一节中的<code>ListView</code>相同的效果，因此就需要准备一份同样的水果图片。这里我们直接从上一个项目中复制<code>drawable-hdpi</code>到本项目中即可，另外把<code>Fruit</code>类和<code>fruit_item.xml</code>也复制过来，省得将同样的代码再写一遍。<br>其中，<code>Fruit</code>类用于存储水果数据，内容如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fruit</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> imageId;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fruit</span><span class="params">(String name, <span class="keyword">int</span> imageId)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.imageId = imageId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getImageId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> imageId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>fruit_item.xml</code>用于子项自定义布局，内容如下所示：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/fruit_image"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/fruit_name"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"center_vertical"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"10dp"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>紧接着我们需要为<code>RecyclerView</code>准备一个适配器，新建<code>FruitAdapter</code>类，代码如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">FruitAdapter</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> List&lt;Fruit&gt; mFruitList;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FruitAdapter</span><span class="params">(List&lt;Fruit&gt; fruitList)</span> </span>&#123;</div><div class="line">        mFruitList = fruitList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.fruit_item, parent, <span class="keyword">false</span>);</div><div class="line">        ViewHolder holder = <span class="keyword">new</span> ViewHolder(view);</div><div class="line">        <span class="keyword">return</span> holder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        Fruit fruit = mFruitList.get(position);</div><div class="line">        holder.fruitImage.setImageResource(fruit.getImageId());</div><div class="line">        holder.fruitName.setText(fruit.getName());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mFruitList.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line">        ImageView fruitImage;</div><div class="line">        TextView fruitName;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(itemView);</div><div class="line">            fruitImage = (ImageView) itemView.findViewById(R.id.fruit_image);</div><div class="line">            fruitName = (TextView) itemView.findViewById(R.id.fruit_name);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里首先定义了一个内部类<code>ViewHolder</code>，<code>ViewHolder</code>要继承自<code>RecyclerView.ViewHolder</code>。然后<code>ViewHolder</code>的构造方法中要传入一个<code>View</code>参数，这个参数通常就是<code>RecyclerView</code>子项的最外层布局，那么我们就可以通过<code>findViewById()</code>方法来获取到布局中的<code>ImageView</code>和<code>TextView</code>的实例了。<br>接下来，<code>FruitAdapter</code>中也有一个构造方法，这个方法用于把要展示的数据源传进来，并赋值给一个全局变量<code>mFruitList</code>，我们后续的操作都将在这个数据源的基础上进行。<br>由于<code>FruitAdapter</code>是继承自<code>RecyclerView.Adapter</code>的，那么就必须重写<code>onCreateViewHolder()</code>、<code>onBindViewHolder()</code>和<code>getItemCount()</code>这3个方法。<code>onCreateViewHolder()</code>方法是用于创建<code>ViewHolder</code>实例的，在这个方法中将<code>fruit_item</code>布局加载进来，然后创建一个<code>ViewHolder</code>实例，并把加载出来的布局传入到构造方法中，最后将<code>ViewHolder</code>的实例返回。<code>onBindViewHolder()</code>方法是用于对<code>RecyclerView</code>子项的数据进行赋值的，会在每个子项被滚动到屏幕内的时候执行，这里我们通过<code>position</code>参数得到当前项的<code>Fruit</code>实例，然后再将数据设置到<code>ViewHolder</code>的<code>ImageView</code>和<code>TextView</code>当中即可。<code>getItemCount()</code>方法就非常简单了，它用于告诉<code>RecyclerView</code>一共有多少子项，直接返回数据源的长度就可以了。<br>适配器准备好了之后，我们就可以开始使用<code>RecyclerView</code>了，修改<code>MainActivity</code>中的代码，如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> List&lt;Fruit&gt; fruitList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        initFruits();   <span class="comment">// 初始化水果数据</span></div><div class="line">        RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recycler_view);</div><div class="line">        LinearLayoutManager layoutManager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);</div><div class="line">        recyclerView.setLayoutManager(layoutManager);</div><div class="line">        FruitAdapter adapter = <span class="keyword">new</span> FruitAdapter(fruitList);</div><div class="line">        recyclerView.setAdapter(adapter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initFruits</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">2</span>; ++i) &#123;</div><div class="line">            Fruit apple = <span class="keyword">new</span> Fruit(<span class="string">"Apple"</span>, R.drawable.apple_pic);</div><div class="line">            fruitList.add(apple);</div><div class="line">            Fruit banana = <span class="keyword">new</span> Fruit(<span class="string">"Banana"</span>, R.drawable.banana_pic);</div><div class="line">            fruitList.add(banana);</div><div class="line">            Fruit orange = <span class="keyword">new</span> Fruit(<span class="string">"Orange"</span>, R.drawable.orange_pic);</div><div class="line">            fruitList.add(orange);</div><div class="line">            Fruit watermelon = <span class="keyword">new</span> Fruit(<span class="string">"Watermelon"</span>, R.drawable.watermelon_pic);</div><div class="line">            fruitList.add(watermelon);</div><div class="line">            Fruit pear = <span class="keyword">new</span> Fruit(<span class="string">"Pear"</span>, R.drawable.pear_pic);</div><div class="line">            fruitList.add(pear);</div><div class="line">            Fruit grape = <span class="keyword">new</span> Fruit(<span class="string">"Grape"</span>, R.drawable.grape_pic);</div><div class="line">            fruitList.add(grape);</div><div class="line">            Fruit pineapple = <span class="keyword">new</span> Fruit(<span class="string">"Pineapple"</span>, R.drawable.pineapple_pic);</div><div class="line">            fruitList.add(pineapple);</div><div class="line">            Fruit strawberry = <span class="keyword">new</span> Fruit(<span class="string">"Strawberry"</span>, R.drawable.strawberry_pic);</div><div class="line">            fruitList.add(strawberry);</div><div class="line">            Fruit cherry = <span class="keyword">new</span> Fruit(<span class="string">"Cherry"</span>, R.drawable.cherry_pic);</div><div class="line">            fruitList.add(cherry);</div><div class="line">            Fruit mango = <span class="keyword">new</span> Fruit(<span class="string">"Mango"</span>, R.drawable.mango_pic);</div><div class="line">            fruitList.add(mango);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里，首先使用了一个和<code>ListViewTest</code>项目同样的<code>initFruits()</code>方法，用于初始化所有的水果数据。接着在<code>onCreate()</code>方法中先获取到<code>RecyclerView</code>的实例，然后创建一个<code>LinearLayoutManager</code>对象，并将它设置到<code>RecyclerView</code>当中。<code>LayoutManager</code>用于指定<code>RecyclerView</code>的布局方式，这里使用的<code>LinearLayoutManager</code>是线性布局的意思，可以实现和<code>ListView</code>类似的效果。接下来我们创建了<code>FruitAdapter</code>的实例，并将水果数据传入到<code>FruitAdapter</code>的构造方法中，最后调用<code>RecyclerView</code>的<code>setAdapter()</code>方法来完成适配器设置，这样<code>RecyclerView</code>和数据之间的关联就建立完成了。<br>运行程序，效果如下所示：<br><img src="http://ovamygxnt.bkt.clouddn.com/images/RecyclerView运行效果.jpg"><br>可以看到，我们使用<code>RecyclerView</code>实现了和<code>ListView</code>几乎一模一样的效果，虽说代码量并没有明显地减少，但是逻辑变得更加清晰了。当然这只是<code>RecyclerView</code>的基本用法而已，接下来我们就要看看<code>RecyclerView</code>还能实现哪些<code>ListView</code>实现不了的效果。</p>
<h2 id="实现横向滚动"><a href="#实现横向滚动" class="headerlink" title="实现横向滚动"></a>实现横向滚动</h2><p>我们知道，<code>ListView</code>的扩展性并不好，它只能实现纵向滚动的效果，如果想进行横向滚动的话，<code>ListView</code>就做不到了。这样的话，我们就需要借助于<code>RecyclerView</code>了。<br>首先要对<code>fruit_item</code>布局进行修改，因为目前这个布局里面的元素是水平排列的，适用于纵向滚动的场景，而如果我们要实现横向滚动的话，应该把<code>fruit_item</code>里的元素改成垂直排列才比较合理。<br>修改<code>fruit_item.xml</code>中的代码，如下所示：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"100dp"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/fruit_image"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"center_horizontal"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/fruit_name"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"center_horizontal"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"10dp"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这里，我们将<code>LinearLayout</code>改成垂直方向排列，并把宽度设为<code>100dp</code>。这里将宽度指定为固定值是因为每种水果的文字长度不一致，如果用<code>wrap_content</code>的话，<code>RecyclerView</code>的子项就会有长有短，非常不美观；而如果用<code>match_parent</code>的话，就会导致宽度过长，一个子项占满整个屏幕。<br>最后，我们将<code>ImageView</code>和<code>TextView</code>都设置成了在布局中水平居中，并且使用<code>layout_marginTop</code>属性让文字和图片之间保持一些距离。<br>接下来，在<code>MainActivity</code>中添加代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">LinearLayoutManager layoutManager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);</div><div class="line">layoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);   <span class="comment">// 添加的内容</span></div><div class="line">recyclerView.setLayoutManager(layoutManager);</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>注意：</strong><code>MainActivity</code>中只加入了一行代码，调用<code>LinearLayoutManager</code>的<code>setOrientation()</code>方法来设置布局的排列方向，默认是纵向排列的，我们传入<code>LinearLayoutManager.HORIZONTAL</code>表示让布局横行排列，这样<code>RecyclerView</code>就可以横向滚动了。</p>
</blockquote>
<p>运行程序，效果如下所示：<br><img src="http://ovamygxnt.bkt.clouddn.com/images/横向RecyclerView效果.jpg"><br>为什么<code>ListView</code>很难或者根本无法实现的效果在<code>RecyclerView</code>上这么轻松就能实现了呢？这主要得益于<code>RecyclerView</code>出色的设计。<code>ListView</code>的布局排列是由自身去管理的，而<code>RecyclerView</code>则将这个工作交给了<code>LayoutManager</code>，<code>LayoutManager</code>中制定了一套可扩展的布局排列接口，子类只要按照接口的规范来实现，就能定制出各种不同排列方式的布局了。</p>
<h2 id="实现瀑布流布局"><a href="#实现瀑布流布局" class="headerlink" title="实现瀑布流布局"></a>实现瀑布流布局</h2><p>首先还是来修改一下<code>fruit_item.xml</code>中的代码，如下所示：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_margin</span>=<span class="string">"5dp"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/fruit_image"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"center_horizontal"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/fruit_name"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"left"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"10dp"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>首先将<code>LinearLayout</code>的宽度由<code>100dp</code>改成了<code>match_parent</code>，因为瀑布流布局的宽度应该是根据布局的列数来自动适配的，而不是一个固定值。另外我们使用了<code>layout_margin</code>属性来让子项之间互留一点间距，这样就不至于所有子项都紧贴在一起。还有就是将<code>TextView</code>的对齐属性改成了居左对齐，因为待会儿我们会将文字的长度变长，如果还是居中显示，会感觉怪怪的。<br>修改<code>MainActivity</code>中的代码，如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> List&lt;Fruit&gt; fruitList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        initFruits();   <span class="comment">// 初始化水果数据</span></div><div class="line">        RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recycler_view);</div><div class="line">        StaggeredGridLayoutManager layoutManager = <span class="keyword">new</span> StaggeredGridLayoutManager(<span class="number">3</span>, StaggeredGridLayoutManager.VERTICAL);</div><div class="line">        recyclerView.setLayoutManager(layoutManager);</div><div class="line">        FruitAdapter adapter = <span class="keyword">new</span> FruitAdapter(fruitList);</div><div class="line">        recyclerView.setAdapter(adapter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initFruits</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">2</span>; ++i) &#123;</div><div class="line">            Fruit apple = <span class="keyword">new</span> Fruit(getRandomLengthName(<span class="string">"Apple"</span>), R.drawable.apple_pic);</div><div class="line">            fruitList.add(apple);</div><div class="line">            Fruit banana = <span class="keyword">new</span> Fruit(getRandomLengthName(<span class="string">"Banana"</span>), R.drawable.banana_pic);</div><div class="line">            fruitList.add(banana);</div><div class="line">            Fruit orange = <span class="keyword">new</span> Fruit(getRandomLengthName(<span class="string">"Orange"</span>), R.drawable.orange_pic);</div><div class="line">            fruitList.add(orange);</div><div class="line">            Fruit watermelon = <span class="keyword">new</span> Fruit(getRandomLengthName(<span class="string">"Watermelon"</span>), R.drawable.watermelon_pic);</div><div class="line">            fruitList.add(watermelon);</div><div class="line">            Fruit pear = <span class="keyword">new</span> Fruit(getRandomLengthName(<span class="string">"Pear"</span>), R.drawable.pear_pic);</div><div class="line">            fruitList.add(pear);</div><div class="line">            Fruit grape = <span class="keyword">new</span> Fruit(getRandomLengthName(<span class="string">"Grape"</span>), R.drawable.grape_pic);</div><div class="line">            fruitList.add(grape);</div><div class="line">            Fruit pineapple = <span class="keyword">new</span> Fruit(getRandomLengthName(<span class="string">"Pineapple"</span>), R.drawable.pineapple_pic);</div><div class="line">            fruitList.add(pineapple);</div><div class="line">            Fruit strawberry = <span class="keyword">new</span> Fruit(getRandomLengthName(<span class="string">"Strawberry"</span>), R.drawable.strawberry_pic);</div><div class="line">            fruitList.add(strawberry);</div><div class="line">            Fruit cherry = <span class="keyword">new</span> Fruit(getRandomLengthName(<span class="string">"Cherry"</span>), R.drawable.cherry_pic);</div><div class="line">            fruitList.add(cherry);</div><div class="line">            Fruit mango = <span class="keyword">new</span> Fruit(getRandomLengthName(<span class="string">"Mango"</span>), R.drawable.mango_pic);</div><div class="line">            fruitList.add(mango);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getRandomLengthName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        Random random = <span class="keyword">new</span> Random();</div><div class="line">        <span class="keyword">int</span> length = random.nextInt(<span class="number">20</span>)+<span class="number">1</span>;</div><div class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</div><div class="line">            builder.append(name);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> builder.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先，在<code>onCreate()</code>方法中，我们创建了一个<code>StaggeredGridLayoutManager</code>的实例。<code>StaggeredGridLayoutManager</code>的构造方法接收两个参数，第一个参数用于指定布局的列数，传入 3 表示会把布局分为 3 列；第二个参数用于指定布局的排列方向，传入<code>StaggeredGridLayoutManager.VERTICAL</code>表示会让布局纵向排列，最后再把创建好的实例设置到<code>RecyclerView</code>当中就可以了。<br>没错，仅仅修改了一行代码，我们就已经成功实现瀑布流布局的效果了。不过由于瀑布流布局需要各个子项的高度不一致时才能看出明显的效果，因此设计了一个<code>getRandomLengthName()</code>方法，这个方法使用了<code>Random</code>对象来创造一个 1 到 20 之间的随机数，然后将参数中传入的字符串重复随机遍。在<code>initFruits()</code>方法中，每个水果的名字都改成调用<code>getRandomLengthName()</code>这个方法来生成，这样就能保证各水果名字的长短差距都比较大，子项的高度也就各不相同了。<br>运行程序，效果如下所示：<br><img src="http://ovamygxnt.bkt.clouddn.com/images/瀑布流布局效果.jpg"></p>
<h2 id="RecyclerView的点击事件"><a href="#RecyclerView的点击事件" class="headerlink" title="RecyclerView的点击事件"></a>RecyclerView的点击事件</h2><p>不同于<code>ListView</code>的是，<code>RecyclerView</code>并没有提供类似于<code>setOnItemClickListener()</code>这样的注册监听器方法，而是需要我们自己给子项具体的<code>View</code>去注册点击事件，相比于<code>ListView</code>来说，实现起来要复杂一些。<br>那么你可能就有疑问了，为什么<code>RecyclerView</code>在各个方面的设计都要优于<code>ListView</code>，偏偏在点击事件上却没有处理得非常好呢？其实不是这样的，<code>ListView</code>在点击事件上的处理并不人性化，<code>setOnItemClickListener()</code>方法注册的是子项的点击事件，但如果我想点击的是子项里面具体的某一个按钮呢？虽然<code>ListView</code>也是能做到的，但是实现起来就相对比较麻烦了。为此，<code>RecyclerView</code>干脆直接摒弃了子项点击事件的监听器，所有的点击事件都由具体的<code>View</code>去注册，就再没有这个困扰了。<br>下面注册点击事件，修改<code>FruitAdapter</code>中的代码，如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">FruitAdapter</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</div><div class="line">    ......</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.fruit_item, parent, <span class="keyword">false</span>);</div><div class="line">        <span class="keyword">final</span> ViewHolder holder = <span class="keyword">new</span> ViewHolder(view);</div><div class="line">        holder.fruitView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                <span class="keyword">int</span> position = holder.getAdapterPosition();</div><div class="line">                Fruit fruit = mFruitList.get(position);</div><div class="line">                Toast.makeText(v.getContext(), <span class="string">"you clicked view "</span> + fruit.getName(), Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        holder.fruitImage.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                <span class="keyword">int</span> position = holder.getAdapterPosition();</div><div class="line">                Fruit fruit = mFruitList.get(position);</div><div class="line">                Toast.makeText(v.getContext(), <span class="string">"you clicked image "</span> + fruit.getName(), Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">return</span> holder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ......</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line">        View fruitView;</div><div class="line">        ImageView fruitImage;</div><div class="line">        TextView fruitName;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(itemView);</div><div class="line">            fruitView = itemView;</div><div class="line">            fruitImage = (ImageView) itemView.findViewById(R.id.fruit_image);</div><div class="line">            fruitName = (TextView) itemView.findViewById(R.id.fruit_name);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先修改了<code>ViewHolder</code>，在<code>ViewHolder</code>中添加了<code>fruitView</code>变量来保存子项最外层布局的实例，然后在<code>onCreateViewHolder()</code>方法中注册点击事件就可以了。这里分别为最外层布局和<code>ImageView</code>都注册了点击事件，<code>RecyclerView</code>的强大之处也在这里，它可以轻松地实现子项中任意控件或布局的点击事件。我们在两个点击事件中先获取了用户点击的<code>position</code>，然后通过<code>position</code>拿到相应的<code>Fruit</code>实例，再使用<code>Toast</code>分别弹出两种不同的内容以示区别。<br>运行程序，点击梨子的图片部分，效果如下所示：<br><img src="http://ovamygxnt.bkt.clouddn.com/images/点击梨子的图片部分.jpg"><br>然后再点击草莓的文字部分，效果如下所示：<br><img src="http://ovamygxnt.bkt.clouddn.com/images/点击草莓的文字部分.jpg"></p>
<blockquote>
<p><strong>注意：</strong>由于<code>TextView</code>并没有注册点击事件，因此点击文字这个事件会被子项的最外层布局捕获到。</p>
<p><strong>注意：</strong> <em>文中所提到的图片可以从作者的源码库中获取，<a href="https://github.com/guolindev/booksource" target="_blank" rel="external">点击这里</a>。</em></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;h2 style=&quot;margin: 0;&quot;&gt;前面的话&lt;/h2&gt;&lt;br&gt;本文使用的 IDE 是 Android Studio 2.3.1 ，模拟器是夜神模拟器 5.0.0.0 。&lt;br&gt;文章为学习《第一行代码——Android》（第二版）时所记录的内容，可能包含遇到的问题，仅供学习交流。&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Android学习笔记" scheme="http://silenceneoxw.site/categories/Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android" scheme="http://silenceneoxw.site/tags/Android/"/>
    
      <category term="RecyclerView" scheme="http://silenceneoxw.site/tags/RecyclerView/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://silenceneoxw.site/2017/08/19/hello-world/"/>
    <id>http://silenceneoxw.site/2017/08/19/hello-world/</id>
    <published>2017-08-19T04:03:16.744Z</published>
    <updated>2017-08-21T14:32:04.183Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
      <category term="搭建博客" scheme="http://silenceneoxw.site/categories/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="http://silenceneoxw.site/tags/hexo/"/>
    
      <category term="github" scheme="http://silenceneoxw.site/tags/github/"/>
    
      <category term="test" scheme="http://silenceneoxw.site/tags/test/"/>
    
  </entry>
  
</feed>
