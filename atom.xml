<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Silenceneo&#39;s Blog</title>
  <subtitle>No pains, no gains.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://silenceneo-xw.github.io/"/>
  <updated>2017-08-27T13:40:54.211Z</updated>
  <id>https://silenceneo-xw.github.io/</id>
  
  <author>
    <name>Silenceneo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RecyclerView的简单用法</title>
    <link href="https://silenceneo-xw.github.io/2017/08/23/Android%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/RecyclerView%E7%9A%84%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95/"/>
    <id>https://silenceneo-xw.github.io/2017/08/23/Android学习记录/RecyclerView的简单用法/</id>
    <published>2017-08-23T14:08:15.000Z</published>
    <updated>2017-08-27T13:40:54.211Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><h2 style="margin: 0;">前面的话</h2><br>本文使用的 IDE 是 Android Studio 2.3.1 ，模拟器是夜神模拟器 5.0.0.0 。<br>文章为学习《第一行代码——Android》（第二版）时所记录的内容，可能包含遇到的问题，仅供学习交流。<br></blockquote><br><a id="more"></a></p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先，在<code>Android Studio</code>上新建一个项目，项目名叫<code>RecyclerViewTest</code>，并让<code>Android Studio</code>自动帮我们创建好活动。</p>
<h2 id="RecyclerView的基本用法"><a href="#RecyclerView的基本用法" class="headerlink" title="RecyclerView的基本用法"></a>RecyclerView的基本用法</h2><h3 id="添加依赖库"><a href="#添加依赖库" class="headerlink" title="添加依赖库"></a>添加依赖库</h3><p><code>RecyclerView</code>属于新增的控件，所以首先需要在项目的<code>build.gradle</code>中添加相应的依赖库。打开<code>app/build.gradle</code>文件，在<code>dependencies</code>闭包中添加如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;])</div><div class="line">    androidTestCompile(&apos;com.android.support.test.espresso:espresso-core:2.2.2&apos;, &#123;</div><div class="line">        exclude group: &apos;com.android.support&apos;, module: &apos;support-annotations&apos;</div><div class="line">    &#125;)</div><div class="line">    compile &apos;com.android.support:appcompat-v7:25.3.1&apos;</div><div class="line">    compile &apos;com.android.support:recyclerview-v7:25.3.1&apos;</div><div class="line">    compile &apos;com.android.support.constraint:constraint-layout:1.0.2&apos;</div><div class="line">    testCompile &apos;junit:junit:4.12&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>添加的代码如下（后面的数字与上面的一项相同即可）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile &apos;com.android.support:recyclerview-v7:25.3.1&apos;</div></pre></td></tr></table></figure></p>
<p>添加完成之后，记得要点击一下右上角的<code>Sync Now</code>来进行同步。</p>
<h3 id="修改布局和活动文件"><a href="#修改布局和活动文件" class="headerlink" title="修改布局和活动文件"></a>修改布局和活动文件</h3><p>修改<code>activity_main.xml</code>中的代码，如下所示：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/recycler_view"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span><span class="tag">&lt;/<span class="name">android.support.v7.widget.RecyclerView</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>需要注意的是，由于<code>RecyclerView</code>并不是内置在系统<code>SDK</code>当中的，所以需要把完整的包路径写出来。<br>因为我们想要使用<code>RecyclerView</code>来实现和上一节中的<code>ListView</code>相同的效果，因此就需要准备一份同样的水果图片。这里我们直接从上一个项目中复制<code>drawable-hdpi</code>到本项目中即可，另外把<code>Fruit</code>类和<code>fruit_item.xml</code>也复制过来，省得将同样的代码再写一遍。<br>其中，<code>Fruit</code>类用于存储水果数据，内容如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fruit</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> imageId;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fruit</span><span class="params">(String name, <span class="keyword">int</span> imageId)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.imageId = imageId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getImageId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> imageId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>fruit_item.xml</code>用于子项自定义布局，内容如下所示：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/fruit_image"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/fruit_name"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"center_vertical"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"10dp"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>紧接着我们需要为<code>RecyclerView</code>准备一个适配器，新建<code>FruitAdapter</code>类，代码如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">FruitAdapter</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> List&lt;Fruit&gt; mFruitList;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FruitAdapter</span><span class="params">(List&lt;Fruit&gt; fruitList)</span> </span>&#123;</div><div class="line">        mFruitList = fruitList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.fruit_item, parent, <span class="keyword">false</span>);</div><div class="line">        ViewHolder holder = <span class="keyword">new</span> ViewHolder(view);</div><div class="line">        <span class="keyword">return</span> holder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        Fruit fruit = mFruitList.get(position);</div><div class="line">        holder.fruitImage.setImageResource(fruit.getImageId());</div><div class="line">        holder.fruitName.setText(fruit.getName());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mFruitList.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line">        ImageView fruitImage;</div><div class="line">        TextView fruitName;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(itemView);</div><div class="line">            fruitImage = (ImageView) itemView.findViewById(R.id.fruit_image);</div><div class="line">            fruitName = (TextView) itemView.findViewById(R.id.fruit_name);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里首先定义了一个内部类<code>ViewHolder</code>，<code>ViewHolder</code>要继承自<code>RecyclerView.ViewHolder</code>。然后<code>ViewHolder</code>的构造方法中要传入一个<code>View</code>参数，这个参数通常就是<code>RecyclerView</code>子项的最外层布局，那么我们就可以通过<code>findViewById()</code>方法来获取到布局中的<code>ImageView</code>和<code>TextView</code>的实例了。<br>接下来，<code>FruitAdapter</code>中也有一个构造方法，这个方法用于把要展示的数据源传进来，并赋值给一个全局变量<code>mFruitList</code>，我们后续的操作都将在这个数据源的基础上进行。<br>由于<code>FruitAdapter</code>是继承自<code>RecyclerView.Adapter</code>的，那么就必须重写<code>onCreateViewHolder()</code>、<code>onBindViewHolder()</code>和<code>getItemCount()</code>这3个方法。<code>onCreateViewHolder()</code>方法是用于创建<code>ViewHolder</code>实例的，在这个方法中将<code>fruit_item</code>布局加载进来，然后创建一个<code>ViewHolder</code>实例，并把加载出来的布局传入到构造方法中，最后将<code>ViewHolder</code>的实例返回。<code>onBindViewHolder()</code>方法是用于对<code>RecyclerView</code>子项的数据进行赋值的，会在每个子项被滚动到屏幕内的时候执行，这里我们通过<code>position</code>参数得到当前项的<code>Fruit</code>实例，然后再将数据设置到<code>ViewHolder</code>的<code>ImageView</code>和<code>TextView</code>当中即可。<code>getItemCount()</code>方法就非常简单了，它用于告诉<code>RecyclerView</code>一共有多少子项，直接返回数据源的长度就可以了。<br>适配器准备好了之后，我们就可以开始使用<code>RecyclerView</code>了，修改<code>MainActivity</code>中的代码，如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> List&lt;Fruit&gt; fruitList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        initFruits();   <span class="comment">// 初始化水果数据</span></div><div class="line">        RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recycler_view);</div><div class="line">        LinearLayoutManager layoutManager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);</div><div class="line">        recyclerView.setLayoutManager(layoutManager);</div><div class="line">        FruitAdapter adapter = <span class="keyword">new</span> FruitAdapter(fruitList);</div><div class="line">        recyclerView.setAdapter(adapter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initFruits</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">2</span>; ++i) &#123;</div><div class="line">            Fruit apple = <span class="keyword">new</span> Fruit(<span class="string">"Apple"</span>, R.drawable.apple_pic);</div><div class="line">            fruitList.add(apple);</div><div class="line">            Fruit banana = <span class="keyword">new</span> Fruit(<span class="string">"Banana"</span>, R.drawable.banana_pic);</div><div class="line">            fruitList.add(banana);</div><div class="line">            Fruit orange = <span class="keyword">new</span> Fruit(<span class="string">"Orange"</span>, R.drawable.orange_pic);</div><div class="line">            fruitList.add(orange);</div><div class="line">            Fruit watermelon = <span class="keyword">new</span> Fruit(<span class="string">"Watermelon"</span>, R.drawable.watermelon_pic);</div><div class="line">            fruitList.add(watermelon);</div><div class="line">            Fruit pear = <span class="keyword">new</span> Fruit(<span class="string">"Pear"</span>, R.drawable.pear_pic);</div><div class="line">            fruitList.add(pear);</div><div class="line">            Fruit grape = <span class="keyword">new</span> Fruit(<span class="string">"Grape"</span>, R.drawable.grape_pic);</div><div class="line">            fruitList.add(grape);</div><div class="line">            Fruit pineapple = <span class="keyword">new</span> Fruit(<span class="string">"Pineapple"</span>, R.drawable.pineapple_pic);</div><div class="line">            fruitList.add(pineapple);</div><div class="line">            Fruit strawberry = <span class="keyword">new</span> Fruit(<span class="string">"Strawberry"</span>, R.drawable.strawberry_pic);</div><div class="line">            fruitList.add(strawberry);</div><div class="line">            Fruit cherry = <span class="keyword">new</span> Fruit(<span class="string">"Cherry"</span>, R.drawable.cherry_pic);</div><div class="line">            fruitList.add(cherry);</div><div class="line">            Fruit mango = <span class="keyword">new</span> Fruit(<span class="string">"Mango"</span>, R.drawable.mango_pic);</div><div class="line">            fruitList.add(mango);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里，首先使用了一个和<code>ListViewTest</code>项目同样的<code>initFruits()</code>方法，用于初始化所有的水果数据。接着在<code>onCreate()</code>方法中先获取到<code>RecyclerView</code>的实例，然后创建一个<code>LinearLayoutManager</code>对象，并将它设置到<code>RecyclerView</code>当中。<code>LayoutManager</code>用于指定<code>RecyclerView</code>的布局方式，这里使用的<code>LinearLayoutManager</code>是线性布局的意思，可以实现和<code>ListView</code>类似的效果。接下来我们创建了<code>FruitAdapter</code>的实例，并将水果数据传入到<code>FruitAdapter</code>的构造方法中，最后调用<code>RecyclerView</code>的<code>setAdapter()</code>方法来完成适配器设置，这样<code>RecyclerView</code>和数据之间的关联就建立完成了。<br>运行程序，效果如下所示：<br><img src="http://ovamygxnt.bkt.clouddn.com/images/RecyclerView运行效果.jpg"><br>可以看到，我们使用<code>RecyclerView</code>实现了和<code>ListView</code>几乎一模一样的效果，虽说代码量并没有明显地减少，但是逻辑变得更加清晰了。当然这只是<code>RecyclerView</code>的基本用法而已，接下来我们就要看看<code>RecyclerView</code>还能实现哪些<code>ListView</code>实现不了的效果。</p>
<h2 id="实现横向滚动"><a href="#实现横向滚动" class="headerlink" title="实现横向滚动"></a>实现横向滚动</h2><p>我们知道，<code>ListView</code>的扩展性并不好，它只能实现纵向滚动的效果，如果想进行横向滚动的话，<code>ListView</code>就做不到了。这样的话，我们就需要借助于<code>RecyclerView</code>了。<br>首先要对<code>fruit_item</code>布局进行修改，因为目前这个布局里面的元素是水平排列的，适用于纵向滚动的场景，而如果我们要实现横向滚动的话，应该把<code>fruit_item</code>里的元素改成垂直排列才比较合理。<br>修改<code>fruit_item.xml</code>中的代码，如下所示：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"100dp"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/fruit_image"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"center_horizontal"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/fruit_name"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"center_horizontal"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"10dp"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这里，我们将<code>LinearLayout</code>改成垂直方向排列，并把宽度设为<code>100dp</code>。这里将宽度指定为固定值是因为每种水果的文字长度不一致，如果用<code>wrap_content</code>的话，<code>RecyclerView</code>的子项就会有长有短，非常不美观；而如果用<code>match_parent</code>的话，就会导致宽度过长，一个子项占满整个屏幕。<br>最后，我们将<code>ImageView</code>和<code>TextView</code>都设置成了在布局中水平居中，并且使用<code>layout_marginTop</code>属性让文字和图片之间保持一些距离。<br>接下来，在<code>MainActivity</code>中添加代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">LinearLayoutManager layoutManager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);</div><div class="line">layoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);   <span class="comment">// 添加的内容</span></div><div class="line">recyclerView.setLayoutManager(layoutManager);</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>注意：</strong><code>MainActivity</code>中只加入了一行代码，调用<code>LinearLayoutManager</code>的<code>setOrientation()</code>方法来设置布局的排列方向，默认是纵向排列的，我们传入<code>LinearLayoutManager.HORIZONTAL</code>表示让布局横行排列，这样<code>RecyclerView</code>就可以横向滚动了。</p>
</blockquote>
<p>运行程序，效果如下所示：<br><img src="http://ovamygxnt.bkt.clouddn.com/images/横向RecyclerView效果.jpg"><br>为什么<code>ListView</code>很难或者根本无法实现的效果在<code>RecyclerView</code>上这么轻松就能实现了呢？这主要得益于<code>RecyclerView</code>出色的设计。<code>ListView</code>的布局排列是由自身去管理的，而<code>RecyclerView</code>则将这个工作交给了<code>LayoutManager</code>，<code>LayoutManager</code>中制定了一套可扩展的布局排列接口，子类只要按照接口的规范来实现，就能定制出各种不同排列方式的布局了。</p>
<h2 id="实现瀑布流布局"><a href="#实现瀑布流布局" class="headerlink" title="实现瀑布流布局"></a>实现瀑布流布局</h2><p>首先还是来修改一下<code>fruit_item.xml</code>中的代码，如下所示：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_margin</span>=<span class="string">"5dp"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/fruit_image"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"center_horizontal"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/fruit_name"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"left"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"10dp"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>首先将<code>LinearLayout</code>的宽度由<code>100dp</code>改成了<code>match_parent</code>，因为瀑布流布局的宽度应该是根据布局的列数来自动适配的，而不是一个固定值。另外我们使用了<code>layout_margin</code>属性来让子项之间互留一点间距，这样就不至于所有子项都紧贴在一起。还有就是将<code>TextView</code>的对齐属性改成了居左对齐，因为待会儿我们会将文字的长度变长，如果还是居中显示，会感觉怪怪的。<br>修改<code>MainActivity</code>中的代码，如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> List&lt;Fruit&gt; fruitList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        initFruits();   <span class="comment">// 初始化水果数据</span></div><div class="line">        RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recycler_view);</div><div class="line">        StaggeredGridLayoutManager layoutManager = <span class="keyword">new</span> StaggeredGridLayoutManager(<span class="number">3</span>, StaggeredGridLayoutManager.VERTICAL);</div><div class="line">        recyclerView.setLayoutManager(layoutManager);</div><div class="line">        FruitAdapter adapter = <span class="keyword">new</span> FruitAdapter(fruitList);</div><div class="line">        recyclerView.setAdapter(adapter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initFruits</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">2</span>; ++i) &#123;</div><div class="line">            Fruit apple = <span class="keyword">new</span> Fruit(getRandomLengthName(<span class="string">"Apple"</span>), R.drawable.apple_pic);</div><div class="line">            fruitList.add(apple);</div><div class="line">            Fruit banana = <span class="keyword">new</span> Fruit(getRandomLengthName(<span class="string">"Banana"</span>), R.drawable.banana_pic);</div><div class="line">            fruitList.add(banana);</div><div class="line">            Fruit orange = <span class="keyword">new</span> Fruit(getRandomLengthName(<span class="string">"Orange"</span>), R.drawable.orange_pic);</div><div class="line">            fruitList.add(orange);</div><div class="line">            Fruit watermelon = <span class="keyword">new</span> Fruit(getRandomLengthName(<span class="string">"Watermelon"</span>), R.drawable.watermelon_pic);</div><div class="line">            fruitList.add(watermelon);</div><div class="line">            Fruit pear = <span class="keyword">new</span> Fruit(getRandomLengthName(<span class="string">"Pear"</span>), R.drawable.pear_pic);</div><div class="line">            fruitList.add(pear);</div><div class="line">            Fruit grape = <span class="keyword">new</span> Fruit(getRandomLengthName(<span class="string">"Grape"</span>), R.drawable.grape_pic);</div><div class="line">            fruitList.add(grape);</div><div class="line">            Fruit pineapple = <span class="keyword">new</span> Fruit(getRandomLengthName(<span class="string">"Pineapple"</span>), R.drawable.pineapple_pic);</div><div class="line">            fruitList.add(pineapple);</div><div class="line">            Fruit strawberry = <span class="keyword">new</span> Fruit(getRandomLengthName(<span class="string">"Strawberry"</span>), R.drawable.strawberry_pic);</div><div class="line">            fruitList.add(strawberry);</div><div class="line">            Fruit cherry = <span class="keyword">new</span> Fruit(getRandomLengthName(<span class="string">"Cherry"</span>), R.drawable.cherry_pic);</div><div class="line">            fruitList.add(cherry);</div><div class="line">            Fruit mango = <span class="keyword">new</span> Fruit(getRandomLengthName(<span class="string">"Mango"</span>), R.drawable.mango_pic);</div><div class="line">            fruitList.add(mango);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getRandomLengthName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        Random random = <span class="keyword">new</span> Random();</div><div class="line">        <span class="keyword">int</span> length = random.nextInt(<span class="number">20</span>)+<span class="number">1</span>;</div><div class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</div><div class="line">            builder.append(name);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> builder.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先，在<code>onCreate()</code>方法中，我们创建了一个<code>StaggeredGridLayoutManager</code>的实例。<code>StaggeredGridLayoutManager</code>的构造方法接收两个参数，第一个参数用于指定布局的列数，传入 3 表示会把布局分为 3 列；第二个参数用于指定布局的排列方向，传入<code>StaggeredGridLayoutManager.VERTICAL</code>表示会让布局纵向排列，最后再把创建好的实例设置到<code>RecyclerView</code>当中就可以了。<br>没错，仅仅修改了一行代码，我们就已经成功实现瀑布流布局的效果了。不过由于瀑布流布局需要各个子项的高度不一致时才能看出明显的效果，因此设计了一个<code>getRandomLengthName()</code>方法，这个方法使用了<code>Random</code>对象来创造一个 1 到 20 之间的随机数，然后将参数中传入的字符串重复随机遍。在<code>initFruits()</code>方法中，每个水果的名字都改成调用<code>getRandomLengthName()</code>这个方法来生成，这样就能保证各水果名字的长短差距都比较大，子项的高度也就各不相同了。<br>运行程序，效果如下所示：<br><img src="http://ovamygxnt.bkt.clouddn.com/images/瀑布流布局效果.jpg"></p>
<h2 id="RecyclerView的点击事件"><a href="#RecyclerView的点击事件" class="headerlink" title="RecyclerView的点击事件"></a>RecyclerView的点击事件</h2><p>不同于<code>ListView</code>的是，<code>RecyclerView</code>并没有提供类似于<code>setOnItemClickListener()</code>这样的注册监听器方法，而是需要我们自己给子项具体的<code>View</code>去注册点击事件，相比于<code>ListView</code>来说，实现起来要复杂一些。<br>那么你可能就有疑问了，为什么<code>RecyclerView</code>在各个方面的设计都要优于<code>ListView</code>，偏偏在点击事件上却没有处理得非常好呢？其实不是这样的，<code>ListView</code>在点击事件上的处理并不人性化，<code>setOnItemClickListener()</code>方法注册的是子项的点击事件，但如果我想点击的是子项里面具体的某一个按钮呢？虽然<code>ListView</code>也是能做到的，但是实现起来就相对比较麻烦了。为此，<code>RecyclerView</code>干脆直接摒弃了子项点击事件的监听器，所有的点击事件都由具体的<code>View</code>去注册，就再没有这个困扰了。<br>下面注册点击事件，修改<code>FruitAdapter</code>中的代码，如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">FruitAdapter</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</div><div class="line">    ......</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.fruit_item, parent, <span class="keyword">false</span>);</div><div class="line">        <span class="keyword">final</span> ViewHolder holder = <span class="keyword">new</span> ViewHolder(view);</div><div class="line">        holder.fruitView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                <span class="keyword">int</span> position = holder.getAdapterPosition();</div><div class="line">                Fruit fruit = mFruitList.get(position);</div><div class="line">                Toast.makeText(v.getContext(), <span class="string">"you clicked view "</span> + fruit.getName(), Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        holder.fruitImage.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                <span class="keyword">int</span> position = holder.getAdapterPosition();</div><div class="line">                Fruit fruit = mFruitList.get(position);</div><div class="line">                Toast.makeText(v.getContext(), <span class="string">"you clicked image "</span> + fruit.getName(), Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">return</span> holder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ......</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line">        View fruitView;</div><div class="line">        ImageView fruitImage;</div><div class="line">        TextView fruitName;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(itemView);</div><div class="line">            fruitView = itemView;</div><div class="line">            fruitImage = (ImageView) itemView.findViewById(R.id.fruit_image);</div><div class="line">            fruitName = (TextView) itemView.findViewById(R.id.fruit_name);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先修改了<code>ViewHolder</code>，在<code>ViewHolder</code>中添加了<code>fruitView</code>变量来保存子项最外层布局的实例，然后在<code>onCreateViewHolder()</code>方法中注册点击事件就可以了。这里分别为最外层布局和<code>ImageView</code>都注册了点击事件，<code>RecyclerView</code>的强大之处也在这里，它可以轻松地实现子项中任意控件或布局的点击事件。我们在两个点击事件中先获取了用户点击的<code>position</code>，然后通过<code>position</code>拿到相应的<code>Fruit</code>实例，再使用<code>Toast</code>分别弹出两种不同的内容以示区别。<br>运行程序，点击梨子的图片部分，效果如下所示：<br><img src="http://ovamygxnt.bkt.clouddn.com/images/点击梨子的图片部分.jpg"><br>然后再点击草莓的文字部分，效果如下所示：<br><img src="http://ovamygxnt.bkt.clouddn.com/images/点击草莓的文字部分.jpg"></p>
<blockquote>
<p><strong>注意：</strong>由于<code>TextView</code>并没有注册点击事件，因此点击文字这个事件会被子项的最外层布局捕获到。</p>
<p><strong>注意：</strong> <em>文中所提到的图片可以从作者的源码库中获取，<a href="https://github.com/guolindev/booksource" target="_blank" rel="external">点击这里</a>。</em></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;h2 style=&quot;margin: 0;&quot;&gt;前面的话&lt;/h2&gt;&lt;br&gt;本文使用的 IDE 是 Android Studio 2.3.1 ，模拟器是夜神模拟器 5.0.0.0 。&lt;br&gt;文章为学习《第一行代码——Android》（第二版）时所记录的内容，可能包含遇到的问题，仅供学习交流。&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Android学习笔记" scheme="https://silenceneo-xw.github.io/categories/Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android" scheme="https://silenceneo-xw.github.io/tags/Android/"/>
    
      <category term="RecyclerView" scheme="https://silenceneo-xw.github.io/tags/RecyclerView/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://silenceneo-xw.github.io/2017/08/19/hello-world/"/>
    <id>https://silenceneo-xw.github.io/2017/08/19/hello-world/</id>
    <published>2017-08-19T04:03:16.744Z</published>
    <updated>2017-08-21T14:32:04.183Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
      <category term="搭建博客" scheme="https://silenceneo-xw.github.io/categories/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="https://silenceneo-xw.github.io/tags/hexo/"/>
    
      <category term="github" scheme="https://silenceneo-xw.github.io/tags/github/"/>
    
      <category term="test" scheme="https://silenceneo-xw.github.io/tags/test/"/>
    
  </entry>
  
</feed>
